import { EdgeGatewaySslVpnAdAuthServerJson } from './__json__/edge-gateway-ssl-vpn-ad-auth-server-json';
import { EdgeGatewaySslVpnLdapAuthServerJson } from './__json__/edge-gateway-ssl-vpn-ldap-auth-server-json';
import { EdgeGatewaySslVpnLocalAuthServerJson } from './__json__/edge-gateway-ssl-vpn-local-auth-server-json';
import {
  EdgeGatewaySslVpnPasswordAuthenticationJson
} from './__json__/edge-gateway-ssl-vpn-password-authentication-json';
import { EdgeGatewaySslVpnRadiusAuthServerJson } from './__json__/edge-gateway-ssl-vpn-radius-auth-server-json';
import { EdgeGatewaySslVpnRsaAuthServerJson } from './__json__/edge-gateway-ssl-vpn-rsa-auth-server-json';
import { EdgeGatewaySslVpnAdAuthServer } from './edge-gateway-ssl-vpn-ad-auth-server';
import { EdgeGatewaySslVpnAuthServer } from './edge-gateway-ssl-vpn-auth-server';
import { EdgeGatewaySslVpnLdapAuthServer } from './edge-gateway-ssl-vpn-ldap-auth-server';
import { EdgeGatewaySslVpnLocalAuthServer } from './edge-gateway-ssl-vpn-local-auth-server';
import { EdgeGatewaySslVpnRadiusAuthServer } from './edge-gateway-ssl-vpn-radius-auth-server';
import { EdgeGatewaySslVpnRsaAuthServer } from './edge-gateway-ssl-vpn-rsa-auth-server';

/* istanbul ignore next: autogenerated */
export class EdgeGatewaySslVpnPasswordAuthentication {

  constructor(private _json: EdgeGatewaySslVpnPasswordAuthenticationJson) {
  }

  /**
   * Get authentication timeout.
   * @returns {number}
   */
  get authenticationTimeout(): number {
    return this._json.authentication_timeout;
  }

  /**
   * Get primary auth servers.
   * @returns {Array<EdgeGatewaySslVpnAuthServer>}
   */
  get primaryAuthServers(): Array<EdgeGatewaySslVpnAuthServer> {
    return this._json.primary_auth_servers ?
      this._json.primary_auth_servers.map(it => {
        switch (it.auth_server_type.toString()) {
          case 'AD':
            return new EdgeGatewaySslVpnAdAuthServer(it as EdgeGatewaySslVpnAdAuthServerJson);
          case 'LDAP':
            return new EdgeGatewaySslVpnLdapAuthServer(it as EdgeGatewaySslVpnLdapAuthServerJson);
          case 'LOCAL':
            return new EdgeGatewaySslVpnLocalAuthServer(it as EdgeGatewaySslVpnLocalAuthServerJson);
          case 'RADIUS':
            return new EdgeGatewaySslVpnRadiusAuthServer(it as EdgeGatewaySslVpnRadiusAuthServerJson);
          case 'RSA':
            return new EdgeGatewaySslVpnRsaAuthServer(it as EdgeGatewaySslVpnRsaAuthServerJson);
          default:
            return new EdgeGatewaySslVpnAuthServer(it);
        }
      }) : [];
  }

  /**
   * Get secondary auth server.
   * @returns {EdgeGatewaySslVpnAuthServer | null}
   */
  get secondaryAuthServer(): EdgeGatewaySslVpnAuthServer | null {
    if (!this._json.secondary_auth_server) {
      return null;
    }
    const it = this._json.secondary_auth_server;
    switch (it.auth_server_type.toString()) {
      case 'AD':
        return new EdgeGatewaySslVpnAdAuthServer(it as EdgeGatewaySslVpnAdAuthServerJson);
      case 'LDAP':
        return new EdgeGatewaySslVpnLdapAuthServer(it as EdgeGatewaySslVpnLdapAuthServerJson);
      case 'LOCAL':
        return new EdgeGatewaySslVpnLocalAuthServer(it as EdgeGatewaySslVpnLocalAuthServerJson);
      case 'RADIUS':
        return new EdgeGatewaySslVpnRadiusAuthServer(it as EdgeGatewaySslVpnRadiusAuthServerJson);
      case 'RSA':
        return new EdgeGatewaySslVpnRsaAuthServer(it as EdgeGatewaySslVpnRsaAuthServerJson);
      default:
        return new EdgeGatewaySslVpnAuthServer(it);
    }
  }

  /**
   * Get the json representation of this class.
   * @returns {EdgeGatewaySslVpnPasswordAuthenticationJson}
   */
  get json(): EdgeGatewaySslVpnPasswordAuthenticationJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
