import { CSRJson } from './__json__/csr-json';
import { Attribute } from './attribute';
import { CsrSubject } from './csr-subject';

/* istanbul ignore next: autogenerated */
export class CSR {

  constructor(private _json: CSRJson) {
  }

  /**
   * Get object id.
   * @returns {string}
   */
  get objectId(): string {
    return this._json.object_id;
  }

  /**
   * Get description.
   * @returns {string}
   */
  get description(): string {
    return this._json.description;
  }

  /**
   * Get scope.
   * @returns {string}
   */
  get scope(): string {
    return this._json.scope;
  }

  /**
   * Get is temporal.
   * @returns {boolean}
   */
  get isTemporal(): boolean {
    return this._json.is_temporal;
  }

  /**
   * Get subject.
   * @returns {Array<Attribute>}
   */
  get subject(): Array<Attribute> {
    return this._json.subject.map(it => new Attribute(it));
  }

  /**
   * Get subject formatted data.
   * @returns {CsrSubject}
   */
  get subjectData(): CsrSubject {
    return new CsrSubject({
      cn: this.getSubjectAttributeValue('cn'),
      ou: this.getSubjectAttributeValue('ou'),
      o: this.getSubjectAttributeValue('o'),
      l: this.getSubjectAttributeValue('l'),
      st: this.getSubjectAttributeValue('st'),
      c: this.getSubjectAttributeValue('c')
    });
  }

  /**
   * Get algorithm.
   * @returns {string}
   */
  get algorithm(): string {
    return this._json.algorithm;
  }

  /**
   * Get key size.
   * @returns {number}
   */
  get keySize(): number {
    return this._json.key_size;
  }

  /**
   * Get pem encoding.
   * @returns {string}
   */
  get pemEncoding(): string {
    return this._json.pem_encoding;
  }

  /**
   * Get the json representation of this class.
   * @returns {CSRJson}
   */
  get json(): CSRJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }

  /**
   * Return subject attribute value from key
   * @param {string} key
   * @returns {string | undefined}
   */
  private getSubjectAttributeValue(key: string): string {
    const attr = this._json.subject.find(it => it.key.toLowerCase() === key.toLowerCase());
    return attr ? attr.value : '';
  }
}
