import { InternalNetworkJson } from './__json__/internal-network-json';
import { Iland } from '../../iland';
import { AbstractNetwork } from './abstract-network';
import { EntityType } from '../common/__json__/entity-type';
import { Task } from '../task/task';
import { OrgVdcNetworkUpdateRequest } from './org-vdc-network-update-request';
import { TaskJson } from '../task/__json__/task-json';

/**
 * Internal Network.
 */
export class InternalNetwork extends AbstractNetwork {

  constructor(_json: InternalNetworkJson) {
    super(_json);
  }

  /**
   * Gets an internal network by UUID.
   * @param uuid internal network UUID
   * @returns {Promise<InternalNetwork>} promise that resolves with the internal network
   */
  static async getInternalNetwork(uuid: string): Promise<InternalNetwork> {
    return Iland.getHttp().get(`/org-vdc-networks/${uuid}`).then((response) => {
      const json = response.data as InternalNetworkJson;
      return new InternalNetwork(json);
    });
  }

  get entityType(): EntityType {
    return 'IAAS_INTERNAL_NETWORK';
  }

  /**
   * Gets the UUID of the edge gateway that the network is connected to, if its a NAT routed network or null otherwise.
   * @returns {string|null} edge gateway UUID or null
   */
  get edgeUuid(): string | null {
    return (this._json as InternalNetworkJson).edge_uuid;
  }

  /**
   * Indicates whether this network is shared with other vDCs within the same organization.
   * @returns {boolean} value
   */
  get shared(): boolean {
    return (this._json as InternalNetworkJson).shared;
  }

  /**
   *
   * @returns {boolean} value
   */
  get retainNetInfoAcrossDeployments(): boolean {
    return (this._json as InternalNetworkJson).retain_net_info_across_deployments;
  }

  /**
   * Indicates whether this network is a sub-interface
   * @returns {boolean} value
   */
  get subInterface(): boolean {
    return (this._json as InternalNetworkJson).sub_interface;
  }

  /**
   * Indicates whether this network is a distributed interface
   * @returns {boolean} value
   */
  get distributedInterface(): boolean {
    return (this._json as InternalNetworkJson).distributed_interface;
  }

  /**
   * Indicates whether guest VLAN is allowed for this network
   * @returns {boolean} value
   */
  get guestVlanAllowed(): boolean {
    return (this._json as InternalNetworkJson).guest_vlan_allowed;
  }

  /**
   * Gets the raw JSON object from the API.
   * @returns {InternalNetworkJson} the API __json__ object
   */
  get json(): InternalNetworkJson {
    return Object.assign({}, this._json as InternalNetworkJson);
  }

  /**
   * Refreshes the internal network data by retrieving it from the API again.
   * @returns {Promise<InternalNetwork>} promise that resolves with this object
   */
  async refresh(): Promise<InternalNetwork> {
    return Iland.getHttp().get(`/org-vdc-networks/${this.uuid}`).then((response) => {
      this._json = response.data as InternalNetworkJson;
      return this;
    });
  }

  /**
   * Updates the configuration of the network.
   * @param {OrgVdcNetworkUpdateRequest} request the update request
   * @returns {Promise<Task>} a promise that resolves with a task
   */
  /* istanbul ignore next: autogenerated */
  async updateOrgVdcNetwork(request: OrgVdcNetworkUpdateRequest): Promise<Task> {
    return Iland.getHttp().put(`/org-vdc-networks/${this.uuid}`, request.json).then((response) => {
      const json = response.data as TaskJson;
      return new Task(json);
    });
  }

  /**
   * Deletes the network.
   * @returns {Promise<Task>} a promise that resolves with a task
   */
  /* istanbul ignore next: autogenerated */
  async deleteOrgVdcNetwork(): Promise<Task> {
    return Iland.getHttp().delete(`/org-vdc-networks/${this.uuid}`).then((response) => {
      const json = response.data as TaskJson;
      return new Task(json);
    });
  }

  /**
   * Convert org vdc network to a distributed interface.
   * @return {Promise<Task>} a promise that resolves with a task
   */
  /* istanbul ignore next: autogenerated */
  async convertToDistributedInterface(): Promise<Task> {
    return Iland.getHttp().post(`/org-vdc-networks/${this.uuid}/actions/convert-network-to-distributed-interface`)
        .then((response) => {
          const json = response.data as TaskJson;
          return new Task(json);
        });
  }

  /**
   * Convert org vdc network to a sub interface.
   * @return {Promise<Task>} a promise that resolves with a task
   */
  /* istanbul ignore next: autogenerated */
  async convertToSubInterface(): Promise<Task> {
    return Iland.getHttp().post(`/org-vdc-networks/${this.uuid}/actions/convert-network-to-sub-interface`)
        .then((response) => {
          const json = response.data as TaskJson;
          return new Task(json);
        });
  }

  /**
   * Convert org vdc network to an internal interface.
   * @return {Promise<Task>} a promise that resolves with a task
   */
  /* istanbul ignore next: autogenerated */
  async convertToInternalInterface(): Promise<Task> {
    return Iland.getHttp().post(`/org-vdc-networks/${this.uuid}/actions/convert-network-to-internal-interface`)
        .then((response) => {
          const json = response.data as TaskJson;
          return new Task(json);
        });
  }
}
